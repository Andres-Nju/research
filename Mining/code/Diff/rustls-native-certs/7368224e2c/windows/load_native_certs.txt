Codes/rustls-native-certs/7368224e2c/windows/load_native_certs_after.rs --- 1/2 --- Rust
1 pub fn load_native_certs() -> Result<RootCertStore, Error> 1 pub fn load_native_certs() -> PartialResult<RootCertStore,
.  {                                                         .  Error> {
2     let mut store = RootCertStore::empty();                2     let mut store = RootCertStore::empty();
.                                                            3     let mut first_error = None;
3                                                            4 
4     let current_user_store = schannel::cert_store::CertSto 5     let current_user_store = schannel::cert_store::CertSto
  re::open_current_user("ROOT")?;                            . re::open_current_user("ROOT")
                                                             6         .map_err(|err| (None, err))?;

Codes/rustls-native-certs/7368224e2c/windows/load_native_certs_after.rs --- 2/2 --- Rust
11         store.add(&rustls::Certificate(cert.to_der().to_v 13         match store.add(&rustls::Certificate(cert.to_der(
.. ec()))                                                    .. ).to_vec())) {
..                                                           14             Err(err) => {
..                                                           15                 first_error = first_error
12             .map_err(|err| Error::new(ErrorKind::InvalidD 16                     .or_else(|| Some(Error::new(ErrorKind
.. ata, err))?                                               .. ::InvalidData, err)));
..                                                           17             }
..                                                           18             _ => {}
..                                                           19         };
13     }                                                     20     }
14                                                           21 
..                                                           22     if let Some(err) = first_error {
..                                                           23         if store.is_empty() {
..                                                           24             Err((None, err))
..                                                           25         } else {
..                                                           26             Err((Some(store), err))
..                                                           27         }
..                                                           28     } else {
15     Ok(store)                                             29         Ok(store)
                                                             30     }

