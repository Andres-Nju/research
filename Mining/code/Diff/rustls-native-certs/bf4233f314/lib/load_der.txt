Codes/rustls-native-certs/bf4233f314/lib/load_der_after.rs --- 1/3 --- Text (1 error, exceeded DFT_PARSE_ERROR_LIMIT)
                                                             1 use std::io::Error;
                                                             2 use std::io::BufRead;
                                                             3 
                                                             4 #[cfg(feature = "rustls")]
                                                             5 pub use crate::rustls::{load_native_certs, PartialResult};
                                                             6 
                                                             7 pub trait RootStoreBuilder {

Codes/rustls-native-certs/bf4233f314/lib/load_der_after.rs --- 2/3 --- Text (1 error, exceeded DFT_PARSE_ERROR_LIMIT)
 6 /// store.                                                13 /// store, executing callbacks on the provided builder.
 7 ///                                                       14 ///
 8 /// On success, this returns a `rustls::RootCertStore` lo 15 /// This function fails in a platform-specific way, expre
 . aded with a                                                  ssed in a `std::io::Error`.
 9 /// snapshop of the root certificates found on this platf    
 . orm.  This                                                   
10 /// function fails in a platform-specific way, expressed     
   in a `std::io::Error`.                                       

Codes/rustls-native-certs/bf4233f314/lib/load_der_after.rs --- 3/3 --- Text (1 error, exceeded DFT_PARSE_ERROR_LIMIT)
15 pub fn load_native_certs() -> PartialResult<RootCertStore 20 pub fn build_native_certs<B: RootStoreBuilder>(builder: &
.. , Error> {                                                .. mut B) -> Result<(), Error> {
16     struct RootCertStoreLoader {                          .. 
17         store: RootCertStore,                             .. 
18     };                                                    .. 
19     impl RootStoreBuilder for RootCertStoreLoader {       .. 
20         fn load_der(&mut self, der: Vec<u8>) -> Result<() .. 
.. , Error> {                                                .. 
21             self.store.add(&rustls::Certificate(der))     .. 
22                 .map_err(|err| Error::new(ErrorKind::Inva .. 
.. lidData, err))                                            .. 
23         }                                                 .. 
24         fn load_pem_file(&mut self, rd: &mut dyn BufRead) .. 
..  -> Result<(), Error> {                                   .. 
25             self.store.add_pem_file(rd)                   21     platform::build_native_certs(builder)
26                 .map(|_| ())                              .. 
27                 .map_err(|()| Error::new(ErrorKind::Inval .. 
.. idData, format!("could not load PEM file")))              .. 
28         }                                                 .. 
29     }                                                     .. 
30     let mut loader = RootCertStoreLoader {                .. 
31         store: RootCertStore::empty(),                    .. 
32     };                                                    .. 
33     match build_native_certs(&mut loader) {               .. 
34         Err(err) if loader.store.is_empty() => Err((None, .. 
..  err)),                                                   .. 
35         Err(err) => Err((Some(loader.store), err)),       .. 
36         Ok(()) => Ok(loader.store),                       .. 
37     }                                                     22 }
38 }                                                         23 

