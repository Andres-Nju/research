Codes/rustls-native-certs/78d6742e28/macos/build_native_certs_after.rs --- 1/3 --- Rust
1 pub fn build_native_certs<B: RootStoreBuilder>(builder: &m 2 pub fn load_native_certs() -> Result<Vec<Certificate>, Err
. ut B) -> Result<(), Error> {                                 or> {

Codes/rustls-native-certs/78d6742e28/macos/build_native_certs_after.rs --- 2/3 --- Rust
38     let mut first_error = None;                           39     let mut certs = Vec::new();

Codes/rustls-native-certs/78d6742e28/macos/build_native_certs_after.rs --- 3/3 --- Rust
43         match trusted {                                   44         use TrustSettingsForCertificate::*;
44             TrustSettingsForCertificate::TrustRoot |      45         if let TrustRoot | TrustAsRoot = trusted {
45                 TrustSettingsForCertificate::TrustAsRoot  .. 
.. => {                                                      .. 
46                 if let Err(err) = builder.load_der(der) { .. 
47                     first_error = first_error             .. 
48                         .or_else(|| Some(Error::new(Error 46             certs.push(Certificate(der));
.. Kind::InvalidData, err)));                                .. 
49                 }                                         47         }
50             },                                            .. 
51             _ => {} // discard                            .. 
52         }                                                 .. 
53     }                                                     48     }
54                                                           49 
55     if let Some(err) = first_error {                      .. 
56         Err(err)                                          .. 
57     } else {                                              .. 
58         Ok(())                                            50     Ok(certs)
59     }                                                        

