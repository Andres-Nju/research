    fn default() -> Self {
        Theme {
            bare_member: ThemeColor(Color::Yellow),
            close_delimiter: ThemeColor(Color::White),
            comment: ThemeColor(Color::Green),
            decimal: ThemeColor(Color::Purple),
            dot: ThemeColor(Color::White),
            dot_dot: ThemeColor(Color::Yellow),
            dot_dot_left_angle_bracket: ThemeColor(Color::Yellow),
            external_command: ThemeColor(Color::Cyan),
            external_word: ThemeColor(Color::Green),
            flag: ThemeColor(Color::Blue),
            garbage: ThemeColor(Color::White),
            glob_pattern: ThemeColor(Color::Cyan),
            identifier: ThemeColor(Color::Purple),
            int: ThemeColor(Color::Purple),
            internal_command: ThemeColor(Color::Cyan),
            it_variable: ThemeColor(Color::Purple),
            keyword: ThemeColor(Color::Purple),
            open_delimiter: ThemeColor(Color::White),
            operator: ThemeColor(Color::Yellow),
            path: ThemeColor(Color::Cyan),
            pipe: ThemeColor(Color::Purple),
            separator: ThemeColor(Color::Red),
            shorthand_flag: ThemeColor(Color::Blue),
            size_number: ThemeColor(Color::Purple),
            size_unit: ThemeColor(Color::Cyan),
            string: ThemeColor(Color::Green),
            string_member: ThemeColor(Color::Yellow),
            r#type: ThemeColor(Color::Blue),
            variable: ThemeColor(Color::Purple),
            whitespace: ThemeColor(Color::White),
            word: ThemeColor(Color::Green),
            // These should really be Syles and not colors
            // leave this here for the next change to make
            // ThemeColor, ThemeStyle.
            // open_delimiter: ThemeColor(Color::White.normal()),
            // close_delimiter: ThemeColor(Color::White.normal()),
            // it_variable: ThemeColor(Color::Purple.bold()),
            // variable: ThemeColor(Color::Purple.normal()),
            // r#type: ThemeColor(Color::Blue.bold()),
            // identifier: ThemeColor(Color::Purple.normal()),
            // operator: ThemeColor(Color::Yellow.normal()),
            // dot: ThemeColor(Color::White),
            // dot_dot: ThemeColor(Color::Yellow.bold()),
            // //missing DotDotLeftAngleBracket
            // internal_command: ThemeColor(Color::Cyan.bold()),
            // external_command: ThemeColor(Color::Cyan.normal()),
            // external_word: ThemeColor(Color::Green.bold()),
            // bare_member: ThemeColor(Color::Yellow.bold()),
            // string: ThemeColor(Color::Green.normal()),
            // string_member: ThemeColor(Color::Yellow.bold()),
            // path: ThemeColor(Color::Cyan.normal()),
            // glob_pattern: ThemeColor(Color::Cyan.bold()),
            // word: ThemeColor(Color::Green.normal()),
            // keyword: ThemeColor(Color::Purple.bold()),
            // pipe: ThemeColor(Color::Purple.bold()),
            // flag: ThemeColor(Color::Blue.bold()),
            // shorthand_flag: ThemeColor(Color::Blue.bold()),
            // int: ThemeColor(Color::Purple.bold()),
            // decimal: ThemeColor(Color::Purple.bold()),
            // garbage: ThemeColor(Style::new().fg(Color::White).on(Color::Red)),
            // whitespace: ThemeColor(Color::White.normal()),
            // separator: ThemeColor(Color::Red),
            // comment: ThemeColor(Color::Green.bold()),
            // size_number: ThemeColor(Color::Purple.bold()),
            // size_unit: ThemeColor(Color::Cyan.bold()),
        }
    }
